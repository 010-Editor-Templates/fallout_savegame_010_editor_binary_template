//-----------------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File:     Fallout4_SaveGame_Binary_Template.bt
// Author:   zach@okzach.com
// Revision: 0.1.2
// Purpose:  Defines a template for
//           parsing .FOS files used
//           by Fallout 4 for Save Games.
//-----------------------------------------------


// wstring, as used in fo4 save files
typedef struct {
    uint16  size <hidden=true, fgcolor=cLtGray>;
    char    data[size];
} WSTRING <read=ReadWSTRING>;

string ReadWSTRING( WSTRING &ws ) {
    string s;
    SPrintf( s, "%s", ws.data ); 
    return s;
}


// RGBA Pixel used for Screenshot data
typedef struct {  // Have not verified color order, assuming RGBA for now
    ubyte   rgbRed      <name="Screenshot Width", fgcolor=cRed, bgcolor=cDkBlue>;
    ubyte   rgbGreen    <name="Screenshot Width", fgcolor=cGreen, bgcolor=cDkBlue>;
    ubyte   rgbBlue     <name="Screenshot Width", fgcolor=cBlue, bgcolor=cDkBlue>;
    ubyte   rgbAlpha    <name="Screenshot Width", fgcolor=cLtGray, bgcolor=cDkBlue>;
} RGBA <read=ReadRGBA>;

string ReadRGBA( RGBA &a )
{
    string s;
    SPrintf( s, "#%02X%02X%02X%02X", a.rgbRed, a.rgbGreen, a.rgbBlue, a.rgbAlpha );
    return s;
}


// Player Gender
typedef enum <uint16> {
    MALE = 0,
    FEMALE = 1
} GENDER;


// Screenshot
typedef struct {
    uint32  width <name="Screenshot Width", fgcolor=cWhite, bgcolor=cDkBlue>;
    uint32  height <name="Screenshot Height", fgcolor=cWhite, bgcolor=cDkBlue>;
    RGBA    data[ width * height ] <name="Screenshot Data">;
} SCREENSHOT <read=ReadSCREENSHOT>;

string ReadSCREENSHOT( SCREENSHOT &shot )
{
    string s;
    SPrintf( s, "%dx%d", shot.width, shot.height );
    return s;
}


// Fallout 4 Save Game File Structure
struct FO4SAVEGAME {
    // File start
    char    magic[12] <name="Signature", fgcolor=cGreen, bgcolor=cGray>;
    uint32  headerSize <name="Header Size">;

    if( magic != "FO4_SAVEGAME" ) {
        Warning( "File is not a FO4 Save File. Template stopped." );
        return -1;
    }

    // Header data
    uint32  saveVersion <name="Save Version">;
    uint32  saveNumber <name="Save Number">;
    WSTRING playerName <name="Player Name", fgcolor=cRed, bgcolor=cGray>;
    uint32  playerLevel <name="Player Level", fgcolor=cGreen>;
    WSTRING playerLocation <name="Player Location", fgcolor=cYellow, bgcolor=cGray>;
    WSTRING gameTime <name="Game Time", fgcolor=cAqua, bgcolor=cGray>;
    WSTRING playerRace <name="Player Race", fgcolor=cPurple, bgcolor=cGray>;
    GENDER  playerGender <name="Player Gender">;
    float   playerExp <name="Experience earned">;
    float   levelExp <name="Experience required">;
    FILETIME    filetime <name="filetime">;
    SCREENSHOT  screenshot <name="Screenshot">;
    
    // App info
    ubyte   formVersion <name="Form? Version">;
    WSTRING gameVersion <name="Game Version">;

    // File list
    uint32  fileListSize <hidden=true>;
    ubyte   fileListCount <name="Plugin File Count">;
    WSTRING fileList[fileListCount] <optimize=false, name="Plugin Files">;

    // File Map
    struct FILEMAP {
        uint32 unknown1Offset <name="Unknown Offset 1", fgcolor=cBlack, bgcolor=cDkPurple>;
        uint32 unknown2Offset <name="Unknown Offset 2", fgcolor=cBlack, bgcolor=cDkPurple>;
        uint32 globalData1Offset <name="Global Data 1 Offset", fgcolor=cGreen, bgcolor=cDkPurple>;
        uint32 globalData2Offset <name="Global Data 2 Offset", fgcolor=cGreen, bgcolor=cDkPurple>;
        uint32 changeFormsOffset <name="Change Forms Offset", fgcolor=cYellow, bgcolor=cDkPurple>;
        uint32 globalData3Offset <name="Global Data 3 Offset", fgcolor=cGreen, bgcolor=cDkPurple>;
        uint32 globalData1Count <name="Global Data 1 Count", fgcolor=cDkGreen, bgcolor=cDkPurple>;
        uint32 globalData2Count <name="Global Data 2 Count", fgcolor=cDkGreen, bgcolor=cDkPurple>;
        uint32 globalData3Count <name="Global Data 3 Count", fgcolor=cDkGreen, bgcolor=cDkPurple>;
        uint32 changeFormsCount <name="Change Forms Count", fgcolor=cYellow, bgcolor=cDkPurple>;
    } filemap;
} fo4savegame;


// Global Data
typedef struct {
    uint32  id;
    uint32  size;
    if( size > 0 )
        ubyte   data[size];
} DATABLOCK <read=ReadDATABLOCK>;

string ReadDATABLOCK( DATABLOCK &b ) {
    string s;
    SPrintf( s, "ID: %d", b.id );
    return s;
}

struct GLOBALDATA {
    FSeek( fo4savegame.filemap.globalData1Offset );
    DATABLOCK   globalData1[fo4savegame.filemap.globalData1Count] <optimize=false>;
    FSeek( fo4savegame.filemap.globalData2Offset );
    DATABLOCK   globalData2[fo4savegame.filemap.globalData2Count] <optimize=false>;
    FSeek( fo4savegame.filemap.globalData3Offset );
    DATABLOCK   globalData3[fo4savegame.filemap.globalData3Count] <optimize=false>;
} globaldata;


// Change Forms (?)
typedef struct {
    ubyte   id[3];
    uint32  flags;
    ubyte   type;
    ubyte   version;
    local uint32 lenType;
    lenType = type >> 6;
    switch( lenType ) {
        case 0:
            ubyte   deflatedSize;
            ubyte   inflatedSize;
            break;
        case 1:
            uint16  deflatedSize;
            uint16  inflatedSize;
            break;
        case 2:
            uint32  deflatedSize;
            uint32  inflatedSize;
            break;
    }
    if( deflatedSize > 0 )
        ubyte   data[deflatedSize];
} CHANGEFORM <read=ReadCHANGEFORM>;

string ReadCHANGEFORM( CHANGEFORM &c ) {
    string s;
    SPrintf( s, "id: %d %d %d", c.id[0], c.id[1], c.id[2] );
    return s;
}

FSeek( fo4savegame.filemap.changeFormsOffset );
struct CHANGEFORMS {
    CHANGEFORM  changeForm[fo4savegame.filemap.changeFormsCount] <optimize=false>;
} changeforms;


// Player Stats
typedef struct {
    WSTRING stat <name="Player Stat", fgcolor=cGreen, bgcolor=cGray>;
    ubyte   flag <name="Flag? or Group?", fgcolor=cDkGreen>;
    uint32  value <name="Stat Value", fgcolor=cGreen, bgcolor=cLtGray>;
} PLAYERSTAT <read=ReadPLAYERSTAT>;

string ReadPLAYERSTAT( PLAYERSTAT &p ) {
    string s;
    SPrintf( s, "%s: %d", p.stat.data, p.value);
    return s;
}

// Extract the Player Stats from the first Global Data 1 block
FSeek( startof( globaldata.globalData1[0].data ) );
struct PLAYERSTATS {
    uint32 count <hidden=true>;
    PLAYERSTAT stats[count] <optimize=false>;
} playerstats;

